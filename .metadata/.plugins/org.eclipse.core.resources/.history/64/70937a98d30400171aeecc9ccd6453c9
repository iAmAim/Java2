package chatclient;

import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import interfaces.ChatClient;
import interfaces.ChatServer;

public class ChatClientManagerTest {
	ChatServiceManager sut = Mockito.mock(ChatServiceManager.class);;
	ChatServer serverMock = Mockito.mock(ChatServer.class);
	Set<ChatClient> clients = new CopyOnWriteArraySet<>();

	@Before
	public void setUp() throws AccessException, RemoteException, NotBoundException {

	}

	@Test
	public void isExistingUserTest_Success() throws RemoteException, NotBoundException {

		clients.add(new ChatClientImpl("Ana"));
		clients.add(new ChatClientImpl("Taylor"));
		when(sut.getServer()).thenReturn(serverMock);
		when(sut.getServer().getUsers()).thenReturn(clients);
		for (ChatClient c : clients) {
			System.out.println("name: " + c.getName());
		}

		System.out.println("EA? " + sut.isExistingUser("asdfsdf"));
		assertTrue(sut.isExistingUser("Ana"));

	}

}
