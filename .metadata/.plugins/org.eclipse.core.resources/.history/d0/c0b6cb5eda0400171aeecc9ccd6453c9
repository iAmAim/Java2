package chatclient;

import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import interfaces.ChatClient;
import interfaces.ChatServer;

@RunWith(PowerMockRunner.class)
@PrepareForTest(ChatServiceManager.class)
public class ChatClientManagerTest {
	ChatServiceManager sut ;
	ChatServer serverMock;
	Set<ChatClient> clients = new CopyOnWriteArraySet<>();
	

	@Before
	public void setUp() throws AccessException, RemoteException, NotBoundException {
		
		sut = Mockito.mock(ChatServiceManager.class);
		serverMock = (ChatServer) LocateRegistry.createRegistry(9901);
		
	}

	@Test
	public void isExistingUserTest_Success() throws RemoteException, NotBoundException {

		clients.add(new ChatClientImpl("Ana"));
		clients.add(new ChatClientImpl("Taylor"));
		
		//verify(sut, times(1)).setServer();
		//when(sut.getServer()).thenReturn(serverMock);
		//when(LocateRegistry.getRegistry().lookup("chatServer")).thenReturn(serverMock);
		//when(sut.server.getUsers()).thenReturn(clients);
		
		boolean isExisting = sut.isExistingUser("Taylor");
		
		//verify(serverMock, times(1)).getUsers();
		assertTrue(isExisting);

	}

}
